openapi: 3.0.0
info:
  title: Brokerage Firm API
  version: 1.0.0
servers:
  - url: http://localhost:8080/brokage/api
paths:
  /admin/orders:
    post:
      summary: Create a new order
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Bad request
    get:
      summary: List orders
      security:
        - basicAuth: []
      parameters:
        - in: query
          name: customerId
          schema:
            type: integer
            format: int64
          required: false
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          required: false
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Bad request
  /admin/orders/{orderId}:
    delete:
      summary: Delete an order
      security:
        - basicAuth: []
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Order successfully deleted, no content in the response
        '404':
          description: Order not found
  /admin/orders/{orderId}/match:
    post:
      summary: Match an order
      security:
        - basicAuth: []
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Order successfully matched, no content in the response
        '404':
          description: Order not found
        '400':
          description: Order cannot be matched
  /admin/customers/{customerId}/deposit:
    post:
      summary: Deposit money
      security:
        - basicAuth: []
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepositRequest'
      responses:
        '200':
          description: Money deposited
        '400':
          description: Bad request
  /admin/customers/{customerId}/withdraw:
    post:
      summary: Withdraw money
      security:
        - basicAuth: []
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WithdrawRequest'
      responses:
        '200':
          description: Money withdrawn
        '400':
          description: Bad request
  /admin/assets:
    get:
      summary: List all assets for a customer
      security:
        - basicAuth: []
      parameters:
        - in: query
          name: customerId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: List of assets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssetResponse'
        '400':
          description: Bad request
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    OrderRequest:
      type: object
      properties:
        customerId:
          type: integer
          format: int64
        assetName:
          type: string
        side:
          type: string
          enum: [BUY, SELL]
        size:
          type: integer
        price:
          type: number
      required:
        - customerId
        - assetName
        - side
        - size
        - price
    OrderResponse:
      type: object
      properties:
        orderId:
          type: integer
          format: int64
        customerId:
          type: integer
          format: int64
        assetName:
          type: string
        orderSide:
          type: string
        size:
          type: integer
        price:
          type: number
        status:
          type: string
        createDate:
          type: string
          format: date-time
    DepositRequest:
      type: object
      properties:
        amount:
          type: number
      required:
        - amount
    WithdrawRequest:
      type: object
      properties:
        amount:
          type: number
      required:
        - amount
    AssetResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the asset.
        customerId:
          type: integer
          format: int64
          description: Identifier for the customer who owns the asset.
        assetName:
          type: string
          description: Name of the asset.
        size:
          type: number
          format: double
          description: Total size of the asset.
        usableSize:
          type: number
          format: double
          description: Usable size of the asset.
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the asset was created.
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the asset was last updated.
      required:
        - id
        - customerId
        - assetName
        - size
        - usableSize
        - createdAt
        - updatedAt

